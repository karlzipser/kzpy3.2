#!/usr/bin/env python
from kzpy3.utils3 import *
exec(identify_file_str)


bash_history = txt_file_to_list_of_strings(opjh('.bash_history'))
H = {}
Open = {}
for bh in bash_history:
    h = bh
    if len(h) < 1:
        continue
    while h[-1] in [' ','\t']:
        h = h[:-1]
    l = h.split(' ')
    command = l[0]
    if command not in H:
        H[command] = []
    H[command].append(h)
    H[command] = list(set(H[command]))
    Open[command] = False
Open['python'] = True

command_show_initial = ['python']#,'grep','ls','diff']
pattern_hide_initial = ['','Command','pcal35.py']
pattern_require = []

try:
    assert(False)
    H = lo(opjk('scripts/__local__/histdic.pkl'))
    command_show = H['command_show']
    pattern_hide = H['pattern_hide']
except:
    command_show = []
    for a in command_show_initial:
        command_show.append(a)
    pattern_hide = []
    for a in pattern_hide_initial:
        pattern_hide.append(a)


while True:
    try:
        clear_screen()
        print 
        sorted_H_keys = sorted(H.keys())
        line_list = []
        command_hide = []
        for command in sorted_H_keys:
            if command not in command_show:
                command_hide.append(command)
                continue

            if Open[command]:
                line_list.append((command,'-'))
                sorted_commands = sorted(H[command])
                for c in sorted_commands:
                    line_list.append((c,'line'))
            else:
                line_list.append((command,'+'))

        command_hide = sorted(list(set(command_hide)))
        try:
            command_hide.remove('')
        except:
            pass
        pattern_hide = sorted(list(set(pattern_hide)))
        pattern_require = sorted(list(set(pattern_require)))
        try:
            pattern_hide.remove('')
        except:
            pass
        clp('command_hide:','`',', '.join(command_hide),'`b-b')
        clp('pattern_hide:','`',', '.join(pattern_hide),'`m-b')
        for i in rlen(line_list):
            if is_even(i):
                eo = '`c'
            else:
                eo = '`g'
            a = line_list[i]
            if len(a[0]) < 1:
                continue

            assert type(a) == tuple
            assert len(a) == 2
            if a[1] == 'line':
                tb = '\t'
            else:
                tb = ''
            p = cf(tb,'`',i,'`--u',s0='',s1='')
            
            do_continue = False
            if a[1] == 'line':
                line_str = a[0]
                line_str_split = line_str.split(' ')
                if line_str_split[0] == 'python':
                    if len(line_str_split) > 1:
                        if len(sggo(line_str_split[1])) < 1:
                            eo = '`--d'
                if len(pattern_require) > 0:
                    for pr in pattern_require:
                        if pr not in a[0]:
                            #clp(pr,'not in',a[0])
                            do_continue = True
                            break
                        else:
                            pass#clp(pr,'in',a[0])
                for ph in pattern_hide:
                    if ph in a[0]:
                        do_continue = True
                        break
                s = cf('',a[0],eo,s0='',s1='')
            else:
                if a[1] == '+':
                    s = cf(a[0],'+','`g')
                elif a[1] == '-':
                    s = cf(a[0],'-','`r-b')
            if do_continue:
                continue
            clp(p,s,p,s0=' ')

        b = raw_input(cf("Enter number or 'q' to quit --> ",'`-b-'))
        if b == 'q':
            break
        elif b[0] == 'L': #load
            try:
                E = lo(opjk('scripts/__local__/histdic.pkl'))
                command_show = E['command_show']
                pattern_hide = E['pattern_hide']
                #kprint(E,'E')
                #raw_enter()
            except:
                clp(fline(),'could not load histdic.pkl',ra=1)
        elif b[0] == 'S': #save
            try:
                so(opjk('scripts/__local__/histdic.pkl'),{'command_show':command_show,'pattern_hide':pattern_hide})
                #command_show = H['command_show']
                #pattern_hide = H['pattern_hide']
            except:
                clp(fline(),'could not load histdic.pkl')
        elif b[0] == 'R': #reset
            command_show = []
            for a in command_show_initial:
                command_show.append(a)
            pattern_hide = []
            for a in pattern_hide_initial:
                pattern_hide.append(a)
            pattern_require = []
        elif b[0] == '!':
            pattern_require.append(b[1:])
        elif b[0] == ']':
            pattern_hide.append(b[1:])
        elif b[0] == '[':
            pattern_hide.remove(b[1:])
        elif b[0] == '+':
            command_show.append(b[1:])
            Open[b[1:]] = True
        elif b[0] == '-':
            command_show.remove(b[1:])
        if not str_is_int(b):
            continue
        n = int(b)
        a = line_list[n]
        if len(a[1]) > 2:
            print a[1]
        if a[1] == '-':
            Open[a[0]] = False
        elif a[1] == '+':
            Open[a[0]] = True
        elif a[1] == 'line':
            qu = cf('Do','`',a[0],'`rwb','[y]/n ? ')
            try:
                pyperclip.copy(a[0])
                cy("In clipboard:","'"+a[0]+"'")
            except:
                cr('cannot copy to clipboard becaue do not have pyperclip')
            u = raw_input(qu)
            if u in ['','y']:
                os.system(a[0])
                raw_enter()
    
    except KeyboardInterrupt:
        cr('*** KeyboardInterrupt ***')
        sys.exit()
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        file_name = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        CS_('Exception!',emphasis=True)
        CS_(d2s(exc_type,file_name,exc_tb.tb_lineno),emphasis=False)
        clp("\tType number of a command followed by '+' or '-' to open/close.")
        clp("\tType '+' or '-' followed by command name to add or subtract topics. E.g., '-python'")
        clp("\tType ']' or '[' followed by pattern to exclude or include it. E.g., ']Train_'")
        clp("\tType '!' followed by pattern to require it. E.g., '!menu'")
        clp("\tType 'S' to save, 'L' to load, and 'R' to reset.")
        clp()
        raw_enter()

#EOF