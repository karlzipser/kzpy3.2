
from kzpy3.utils3 import *

[< Class,Calibrate2,Exit_is_Menu_Controlled
	D['impossible source states'] = ['Calibrate0','Calibrate2']
	D['possible destination states'] = ['HumanPID']
	D['possible source states'] = ['Calibrate1']
	D['impossible destination states'] = ['Calibrate0','Calibrate1','Calibrate2']
	
	[< def_Function(P):
		"Can this state can be entered?"
		if not P['now in calibration mode']:
			#cr(indent,"not P['now in calibration mode'], cannot enter",D['state'])
			return False
		[< function_auto-utils
		result = parent(P)
		return result

	[< def_Function(P):
		"Upon entry do this..."
		[< function_auto-utils
		result = parent(P)
		if result == False:
			return
		D['entry timer'] = Timer(0)
		cr(indent+CLASS_TYPE,"""
            start.message('Calibrate now.')
            if P['servo_pwm_max'] < P['servo_pwm']:
                P['servo_pwm_max'] = P['servo_pwm']
            if P['servo_pwm_min'] > P['servo_pwm']:
                P['servo_pwm_min'] = P['servo_pwm']
            if P['motor_pwm_max'] < P['motor_pwm']:
                P['motor_pwm_max'] = P['motor_pwm']
            if P['motor_pwm_min'] > P['motor_pwm']:
                P['motor_pwm_min'] = P['motor_pwm']
            if P['servo_pwm_max'] - P['servo_pwm_min'] > 300:
                if P['motor_pwm_max'] - P['motor_pwm_min'] > 300:
                    P['calibrated'] = True
		""")
		return True


	[< def_Function(P):
		"Is it time to exit?"
		[< function_auto-utils
		result = parent(P)
		if not result:
			return False
		if P['now in calibration mode']:
			cr(indent+CLASS_TYPE,"still in menu set P['now in calibration mode'], cannot exit.")
			return False
		if not P['calibrated']:
			cr(indent+CLASS_TYPE,"P['calibrated'] == False, cannot exit.")
			return False
		return True

	[<put_functions_into_D

	return D





if __name__ == '__main__':

	P={}
	P['current state'] = 'Calibrate1'
	P['now in calibration mode'] = True
	P['calibrated'] = True
	S = Calibrate2()
	S['dst_state'] = 'HumanPID'
	S['possible destination states'] = ['HumanPID']
	S["Upon entry do this..."](P)
	S["Upon exit do this..."](P)
	time.sleep(1.1)
	S["Upon exit do this..."](P)
	P['calibrated'] = True
	time.sleep(0.1)
	P['now in calibration mode'] = False
	S["Upon exit do this..."](P)

	pprint(P)





#EOF