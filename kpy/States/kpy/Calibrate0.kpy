
from kzpy3.utils3 import *

[< Class,Calibrate0
	D['impossible source states'] = ['Calibrate0','Calibrate1','Calibrate2']
	D['possible destination states'] = ['Calibrate1']
	D['possible source states'] = []
	D['impossible destination states'] = ['Calibrate0','Calibrate2']
	
	[< def_Function(P):
		"Can this state can be entered?"
		if not P['now in calibration mode']:
			cr(indent+CLASS_TYPE+"\tnot P['now in calibration mode'], cannot enter",D['state'])
			return False
		[< function_auto-utils
		result = parent(P)
		return result

	[< def_Function(P):
		"Upon entry do this..."
		[< function_auto-utils
		
		if not D["Can this state can be entered?"](P):
			return False
		result = parent(P)
		if result == False:
			return False
		P['current state'] = CLASS_TYPE		
		cb(indent+CLASS_TYPE,': Entering state',CLASS_TYPE+'.')
		return True



		cr(indent+CLASS_TYPE,"""
		P['calibrated'] = False
		P['servo_pwm_null'] = P['servo_pwm']
		P['motor_pwm_null'] = P['motor_pwm']
		D['entry timer'] = Timer(1.1)
			""")
		return True


	[< def_Function(P):
		"Is it time to exit?"
		[< function_auto-utils
		result = parent(P)
		return result


	[< def_Function(P):
		"Upon exit do this..."
		[< function_auto-utils  
		result = parent(P)
		return result

	[<put_functions_into_D

	return D




	








if __name__ == '__main__':

	#clear_screen()

	P={}
	P['current state'] = 'none'
	P['now in calibration mode'] = True
	
	S = Calibrate0()
	S['dst_state'] = 'next state'
	S['possible destination states'] = ['next state']
	S["Upon entry do this..."](P)
	S["Upon exit do this..."](P)
	time.sleep(0.2)
	S["Upon entry do this..."](P)
	S["Upon exit do this..."](P)

	pprint(P)





#EOF